apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: harbor-ha
  labels:
    provider: aws
spec:
  writeConnectionSecretsToNamespace: crossplane-system
  compositeTypeRef:
    apiVersion: harbor.org/v1alpha1
    kind: XHarbor
  resources:
    # RDS Instance
    - name: rds
      base:
        apiVersion: rds.aws.crossplane.io/v1alpha1
        kind: RDSInstance
        spec:
          forProvider:
            dbInstanceClass: db.t3.medium
            masterUsername: harbor
            engine: postgres
            engineVersion: "14"
            skipFinalSnapshotBeforeDeletion: true
            publiclyAccessible: false
            vpcSecurityGroupRefs:
              - name: harbor-db-sg
      patches:
        - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.region
        - fromFieldPath: spec.dbSize
          toFieldPath: spec.forProvider.dbInstanceClass
        - fromFieldPath: spec.storageSize
          toFieldPath: spec.forProvider.allocatedStorage

    # ElastiCache Redis
    - name: redis
      base:
        apiVersion: elasticache.aws.crossplane.io/v1alpha1
        kind: ReplicationGroup
        spec:
          forProvider:
            replicationGroupDescription: Harbor Redis Cache
            engine: redis
            engineVersion: "6.x"
            cacheNodeType: cache.t3.medium
            numCacheClusters: 2
            automaticFailoverEnabled: true
            port: 6379
      patches:
        - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.region
        - fromFieldPath: spec.cacheSize
          toFieldPath: spec.forProvider.cacheNodeType

    # Harbor Helm Release remains the same as before
    - name: harbor
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: Release
        spec:
          forProvider:
            chart:
              name: harbor
              repository: https://helm.goharbor.io
              version: "1.12.0"
            namespace: harbor
            values:
              expose:
                type: ingress
                tls:
                  enabled: true
                ingress:
                  annotations:
                    kubernetes.io/ingress.class: nginx
              persistence:
                enabled: true
                persistentVolumeClaim:
                  registry:
                    storageClass: aws-s3
                  chartmuseum:
                    storageClass: aws-s3
              externalDatabase:
                type: postgresql
                host: ${rds.status.endpoint}
                port: "5432"
                username: harbor
                database: harbor
                sslmode: require
              redis:
                type: external
                external:
                  host: ${redis.status.atEndpoint}
                  port: "6379"
              ha:
                enabled: true
      patches:
        - fromFieldPath: spec.harborVersion
          toFieldPath: spec.forProvider.chart.version
